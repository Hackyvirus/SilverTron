 {/* Stats Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Total Value"
              value={formatCurrency(stats[activeTab].totalValue)}
              change={stats[activeTab].change}
              icon={DollarSign}
              color={TAB_CONFIG[activeTab]}
              isLoading={loading}
            />
            <StatCard
              title="End Balance"
              value={formatCurrency(stats[activeTab].endBalance)}
              icon={TrendingUp}
              color={TAB_CONFIG[activeTab]}
              isLoading={loading}
            />
            <StatCard
              title="Total Share"
              value={`${stats[activeTab].share.toFixed(1)}%`}
              icon={FileText}
              color={TAB_CONFIG[activeTab]}
              isLoading={loading}
            />
            <StatCard
              title="Emp Share"
              value={formatCurrency(stats[activeTab].totalValue * (stats[activeTab].share / 100))}
              icon={User}
              color={TAB_CONFIG[activeTab]}
              isLoading={loading}
            />
          </div>

          {/* Account Data */}
          {consolidatedData.map(account => (
            <div
              key={account.accountNumber}
              className="bg-white border border-gray-200 rounded-lg p-6 shadow-sm mb-6 hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h2 className="text-lg font-bold text-gray-800">
                    {account.profile.fullName} - {account.accountNumber}
                  </h2>
                  <p className="text-sm text-gray-500">{account.accountType}</p>
                </div>
                <div className="text-sm text-gray-500 flex items-center space-x-2">
                  <Clock size={16} />
                  <span>{formatDate(account.latestData.recordedAt)}</span>
                </div>
              </div>

              {/* Key Metrics Overview */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-500">Total</p>
                  <p className="text-lg font-semibold">{formatCurrency(account.latestData.total)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-500">End Balance</p>
                  <p className="text-lg font-semibold">{formatCurrency(account.latestData.endBalance)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-500">Share</p>
                  <p className="text-lg font-semibold">{account.latestData.profile.share}%</p>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-500">Unrealized</p>
                  <p className={`text-lg font-semibold ${account.latestData.unrealizedDelta >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {formatCurrency(account.latestData.unrealizedDelta)}
                  </p>
                </div>
              </div>

              {/* Main Chart */}
              <div className="mb-6">
                <h4 className="text-base font-semibold text-gray-900 mb-3">Performance Overview</h4>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={account.chartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="total" stroke="#3b82f6" strokeWidth={2} />
                    <Line type="monotone" dataKey="endBalance" stroke="#10b981" strokeWidth={2} />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* Detailed Charts */}
              {showDetailedCharts && (
                <div className="mt-10 space-y-8">
                  {(['startBalance', 'endBalance', 'total', 'unrealizedDelta', 'techFees', 'tradeFees'] as const).map((metric) => (
                    <div key={metric}>
                      <h4 className="text-base font-semibold text-gray-900 mb-3 capitalize">
                        {metric.replace(/([A-Z])/g, ' $1')}
                      </h4>
                      <ResponsiveContainer width="100%" height={200}>
                        <AreaChart
                          data={account.historicalData
                            .slice()
                            .reverse()
                            .map((item) => ({
                              date: new Date(item.recordedAt).toLocaleString('en-US', {
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                              }),
                              value: Array.isArray(item[metric])
                                ? (item[metric] as number[]).reduce((a, b) => a + b, 0)
                                : (item[metric] as number),
                            }))}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="date" />
                          <YAxis />
                          <Tooltip />
                          <Area
                            type="monotone"
                            dataKey="value"
                            stroke="#8884d8"
                            fill="#8884d8"
                            fillOpacity={0.3}
                          />
                        </AreaChart>
                      </ResponsiveContainer>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}

          {consolidatedData.length === 0 && (
            <div className="text-center py-12">
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-600 mb-2">No Data Available</h3>
              <p className="text-gray-500">No performance data found for the selected criteria.</p>
            </div>
          )}